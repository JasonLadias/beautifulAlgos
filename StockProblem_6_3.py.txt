class Solution(object):
    def topUp(self, arr, k):

        mem = {}
        
        def dp(index):
            if (index > len(arr) - 1):
                return 0
            if (index in mem):
                return mem[index]
            if (index == len(arr) - 1):
                mem[index] = arr[index]
                return arr[index]
                
            profit = max(arr[index] + dp(index + k), dp(index + 1))
            
            
            mem[index] = profit
            
            return profit
            
        return dp(0)
        
    def bottomUp(self, arr, k):
        length = len(arr)
        dp = [float('-inf') for _ in range(length)]
        dp[length - 1] = arr[length - 1]
        
        for i in range(length - 2, -1, -1):
            if i + k > length - 1:
                dp[i] = max(arr[i], dp[i + 1])
            else:
                dp[i] = max(arr[i] + dp[i + k], dp[i + 1])
                
        return dp[0]
 

a = [4,2,1,3,7,6]
k = 1
print(Solution.topUp(None, a, k))
print(Solution.bottomUp(None, a, k))